<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        5MwFGeTMBRnkzBZeceYKMb7UBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwMOKzYIY4g/SOT
        GP8jkxj/I5MY/yGTGP4LPqfYBRnkzAUZ5MwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwOP6PaIo8c/iOTGP8jkxj/I5MY/yGTGf4KOq7XBRnkzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwRZG3mI5QX/yOTGP8jkxj/I5MY/yGSG/4KNbfVAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwTaGXoIpQY/yOTGP8jkxj/I5MY/yCTG/4Nrg0TAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwUbF7qI5MY/yOTGP8jkxj/I5MY/xOq
        C88Oqg4SAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwUcFfsI5MY/yOT
        GP8jkxj/FKoL/xSqC8cTsBMNAAAAAAAAAAAAAAAAAAAAAAAAAAAFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwWdk7uI5MY/yOTGP8Uqgv/FKoL/xOpCsUVqhUMAAAAAAAAAAAAAAAAAAAAAAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwWfEjwI5MY/xSqC/8Uqgv/FKoL/xSqCn4AAAAAAAAAAAAAAAAAAAAABRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ
        5MwFGeTMBRnkzAUZ5MwFGeTMBRnkzAUZ5MwYgEDyFKoL/xSqC/8TqgqpAJkABQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUqQuGE6oKpgC/AAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfwACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAfwAAAD8AAAAfAA
        AADwAAAA8AAAAP////H////7//////////8=
</value>
  </data>
</root>